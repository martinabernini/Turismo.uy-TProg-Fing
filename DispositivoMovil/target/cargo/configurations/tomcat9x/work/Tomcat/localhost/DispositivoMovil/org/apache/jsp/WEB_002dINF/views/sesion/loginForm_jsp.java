/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.22
 * Generated at: 2023-01-14 14:16:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.sesion;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.helpers.Endpoints;

public final class loginForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.helpers.Endpoints");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"contents order-2 order-md-1\">\r\n");
      out.write("    <div class=\"contents order-2 order-md-1\">\r\n");
      out.write("        <div class=\"container col-6\">\r\n");
      out.write("            <div class=\"row align-items-center justify-content-center\">\r\n");
      out.write("                <div class=\"col-md-7\">\r\n");
      out.write("                    <form action=\"#\" method=\"post\">\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"form-group first\">\r\n");
      out.write("                            <label for=\"login-form-nickname-email\">Nickname o email</label> <input\r\n");
      out.write("                                type=\"text\" class=\"form-control\" id=\"login-form-nickname-email\"\r\n");
      out.write("                                name=\"login-form-nickname-email\">\r\n");
      out.write("\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div class=\"form-group last mb-3\">\r\n");
      out.write("                            <label for=\"login-form-password\">Contraseña</label> <input type=\"password\"\r\n");
      out.write("                                                                                       class=\"form-control\"\r\n");
      out.write("                                                                                       id=\"login-form-password\"\r\n");
      out.write("                                                                                       name=\"login-form-password\">\r\n");
      out.write("\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"d-flex mb-2 align-items-center\">\r\n");
      out.write("                            <label class=\"control control--checkbox mb-0\"><span\r\n");
      out.write("                                    class=\"caption\">Recuerdame</span> <input type=\"checkbox\"\r\n");
      out.write("                                                                             checked=\"checked\"/>\r\n");
      out.write("                                <div class=\"control__indicator\"></div>\r\n");
      out.write("                            </label>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                        ");

                            if ((boolean) request.getAttribute("login-error")) {
                        
      out.write("\r\n");
      out.write("                        <!-- mensaje de error -->\r\n");
      out.write("                        <div class=\"alert alert-danger\" role=\"alert\">\r\n");
      out.write("                            <strong>Oh no!</strong> El usuario o la contraseña son incorrectos.\r\n");
      out.write("                            Intenta de nuevo.\r\n");
      out.write("                        </div>\r\n");
      out.write("                        ");

                            } else {
                        
      out.write("\r\n");
      out.write("\r\n");
      out.write("                        ");

                            if ((boolean) request.getAttribute("login-error-proveedor")) {
                        
      out.write("\r\n");
      out.write("                        <!-- mensaje de error -->\r\n");
      out.write("                        <div class=\"alert alert-danger\" role=\"alert\">\r\n");
      out.write("                            <strong>Oh no!</strong> Parece que estas intentando ingresar con un proveedor.\r\n");
      out.write("                                Acceso restringido a turistas.\r\n");
      out.write("                        </div>\r\n");
      out.write("                        ");

                            }
                        }
                        
      out.write("\r\n");
      out.write("\r\n");
      out.write("                       \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"text-center mt-4\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<span class=\"ml-auto\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<input type=\"submit\" class=\"btn btn-block btn-primary\" id=\"login-form-iniciar-sesion\"\r\n");
      out.write("                                       value=\"Iniciar sesion\"></span>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                    </form>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script defer>\r\n");
      out.write("\r\n");
      out.write("    // add event listener to the form on change\r\n");
      out.write("    let nicknameEmailField = document.getElementById(\"login-form-nickname-email\");\r\n");
      out.write("    let passwordField = document.getElementById(\"login-form-password\");\r\n");
      out.write("    let loginButton = document.getElementById(\"login-form-iniciar-sesion\");\r\n");
      out.write("\r\n");
      out.write("    nicknameEmailField.addEventListener(\"change\", validarNickEmail);\r\n");
      out.write("    passwordField.addEventListener(\"change\", validarPassword);\r\n");
      out.write("    loginButton.addEventListener(\"click\", onSubmit);\r\n");
      out.write("\r\n");
      out.write("    function validarNickEmail() {\r\n");
      out.write("    \t\r\n");
      out.write("    \t\r\n");
      out.write("    \t//TODO\r\n");
      out.write("    \t\r\n");
      out.write("        let nickEmail = nicknameEmailField.value;\r\n");
      out.write("\r\n");
      out.write("        // regex para validar email y nickname\r\n");
      out.write("        let regexNick = /");
      out.print( "^[a-zA-Z0-9_\\-\\.\\u00f1\\u00d1\\u00e1\\u00c1\\u00e9\\u00c9\\u00ed" +
            "\\u00cd\\u00f3\\u00d3\\u00fa\\u00da\\u00fc\\u00dc]+$" );
      out.write("/;\r\n");
      out.write("            let\r\n");
      out.write("        regexEmail = /");
      out.print( "^[A-Za-z0-9._-áéíóúñÁÉÍÓÚÑ]+@[A-Za-z0-9._-áéíóúñÁÉÍÓÚÑ]+\\.[A-Za-z0-9" +
            "._-áéíóúñÁÉÍÓÚÑ]+$" );
      out.write("/;\r\n");
      out.write("\r\n");
      out.write("        if (nickEmail.length === 0\r\n");
      out.write("            || !nickEmail.trim()\r\n");
      out.write("            || (!regexNick.test(nickEmail) && !regexEmail.test(nickEmail))\r\n");
      out.write("        ) {\r\n");
      out.write("            nicknameEmailField.style.borderColor = \"red\";\r\n");
      out.write("            return false;\r\n");
      out.write("        }\r\n");
      out.write("        nicknameEmailField.style.borderColor = \"green\";\r\n");
      out.write("\r\n");
      out.write("        return true; \r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function validarPassword() {\r\n");
      out.write("        let password = passwordField.value;\r\n");
      out.write("\r\n");
      out.write("        if (password.length === 0 || !password.trim()) {\r\n");
      out.write("            passwordField.style.borderColor = \"red\";\r\n");
      out.write("            return false;\r\n");
      out.write("        }\r\n");
      out.write("        passwordField.style.borderColor = \"green\";\r\n");
      out.write("        return true;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function onSubmit(event) {\r\n");
      out.write("        if (!validarNickEmail() || !validarPassword()) {\r\n");
      out.write("            event.preventDefault();\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
